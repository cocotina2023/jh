name: Obfuscate op.js -> dist/opp.js (use header from dist/opp.js if present)

on:
  workflow_dispatch:

jobs:
  build-and-obfuscate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install JavaScript Obfuscator
        run: npm install javascript-obfuscator

      - name: Generate & obfuscate (use header from dist/opp.js if exists)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          mkdir -p dist
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const JavaScriptObfuscator = require('javascript-obfuscator');

          const srcPath = path.resolve('op.js');
          const distPath = path.resolve('dist/opp.js');

          if (!fs.existsSync(srcPath)) {
            console.error('Error: op.js not found in repo root. Place op.js at repo root.');
            process.exit(1);
          }

          const src = fs.readFileSync(srcPath, 'utf8');

          // Regex to match header userID and proxyIPs
          const userRe = /let\s+userID\s*=\s*(?:"([^"]*)"|'([^']*)'|([^;]+?))\s*;/i;
          const proxyRe = /const\s+proxyIPs\s*=\s*\[([^\]]*)\]\s*;?/i;

          // 1) Try to read header from existing dist/opp.js (so manual edits there take precedence)
          let headerText = null;
          if (fs.existsSync(distPath)) {
            const distTxt = fs.readFileSync(distPath, 'utf8');
            const u = distTxt.match(userRe);
            const p = distTxt.match(proxyRe);
            if (u || p) {
              const userVal = u ? (u[1] ?? u[2] ?? (u[3] && u[3].trim()) ?? '') : '';
              const proxyInner = p ? (p[1] ?? '') : '';
              const proxyParts = proxyInner.length ? proxyInner.split(',').map(s => s.trim()).filter(Boolean) : [''];
              const proxyNormalized = proxyParts.length ? proxyParts.map(x => {
                const m = x.match(/^['"](.*)['"]$/);
                return m ? m[1] : x;
              }) : [''];
              const finalUser = userVal.length ? userVal : 'a1b2c3d4-e5f6-7890-1234-567890abcdef';
              headerText = `let userID = "${String(finalUser).replace(/"/g,'\\"')}";\nconst proxyIPs = [${proxyNormalized.map(x => `"${String(x).replace(/"/g,'\\"')}"`).join(', ')}];`;
              console.log('Using header from dist/opp.js (manual edits take precedence).');
            }
          }

          // 2) If header not found in dist, try to extract from source op.js
          if (!headerText) {
            const u2 = src.match(userRe);
            const p2 = src.match(proxyRe);
            const userVal2 = u2 ? (u2[1] ?? u2[2] ?? (u2[3] && u2[3].trim()) ?? '') : '';
            const proxyInner2 = p2 ? (p2[1] ?? '') : '';
            const proxyParts2 = proxyInner2.length ? proxyInner2.split(',').map(s => s.trim()).filter(Boolean) : [''];
            const proxyNormalized2 = proxyParts2.length ? proxyParts2.map(x => {
              const m = x.match(/^['"](.*)['"]$/);
              return m ? m[1] : x;
            }) : [''];
            const finalUser2 = userVal2.length ? userVal2 : 'a1b2c3d4-e5f6-7890-1234-567890abcdef';
            headerText = `let userID = "${String(finalUser2).replace(/"/g,'\\"')}";\nconst proxyIPs = [${proxyNormalized2.map(x => `"${String(x).replace(/"/g,'\\"')}"`).join(', ')}];`;
            console.log('Using header from op.js (fallback).');
          }

          // 3) Remove first occurrence of header from body (if present in src) to avoid duplication
          let body = src;
          const uSrc = body.match(userRe);
          if (uSrc) body = body.replace(uSrc[0], '');
          const pSrc = body.match(proxyRe);
          if (pSrc) body = body.replace(pSrc[0], '');

          // 4) Obfuscate body - keep renameGlobals:false so header names remain usable
          const obfOptions = {
            compact: true,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 0.75,
            deadCodeInjection: true,
            deadCodeInjectionThreshold: 0.4,
            stringArray: true,
            stringArrayEncoding: ['base64'],
            stringArrayThreshold: 0.75,
            renameGlobals: false,
            identifierNamesGenerator: 'mangled',
            numbersToExpressions: true,
            splitStrings: true,
            splitStringsChunkLength: 10,
            transformObjectKeys: true,
            selfDefending: false,
            debugProtection: false,
            disableConsoleOutput: true
          };

          const obf = JavaScriptObfuscator.obfuscate(body, obfOptions).getObfuscatedCode();

          // 5) Safe combine: header (from dist or src) + semicolon + obfuscated body
          const final = headerText + '\n;\n' + obf + '\n';

          fs.writeFileSync(distPath, final, 'utf8');
          console.log('âœ… dist/opp.js written using header from dist/opp.js (if existed) or op.js otherwise.');
          console.log('Header used:', headerText.split(/\r?\n/).slice(0,2).join(' | '));
          NODE

      - name: Commit and push dist/opp.js
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add dist/opp.js
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "build: generate obfuscated dist/opp.js (header from dist if present)"
            git push
          fi

      - name: Show dist/opp.js preview
        run: |
          echo "===== dist/opp.js (first 20 lines) ====="
          head -n 20 dist/opp.js || true
          echo "========================================"
