# .github/workflows/deploy.yml

name: Obfuscate op.js -> dist/opp.js (Preserve Header)

on:
  # 允許您從 GitHub Actions 頁面手動觸發此流程
  workflow_dispatch:

jobs:
  build-and-obfuscate:
    runs-on: ubuntu-latest
    permissions:
      # Action 需要這個權限才能將變更提交回您的儲存庫
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install JavaScript Obfuscator
        run: npm install javascript-obfuscator

      - name: Generate and Obfuscate op.js
        id: obfuscate
        run: |
          mkdir -p dist
          # 修正了打字錯誤：ode -> node
          node <<'NODE'
          const fs = require('fs');
          const JavaScriptObfuscator = require('javascript-obfuscator');

          const sourceFile = 'op.js';
          const outputFile = 'dist/opp.js';

          // --- 💡 核心邏輯修正 ---
          // 1. 定義一個預設的 header，用於首次生成檔案。
          let header = `let userID = "PLEASE-CHANGE-ME-IN-THE-GENERATED-FILE";\nconst proxyIPs = [""];`;

          // 2. 檢查目標檔案 dist/opp.js 是否已存在。
          if (fs.existsSync(outputFile)) {
              console.log(`找到已存在的 ${outputFile}，正在嘗試保留其 header...`);
              const existingContent = fs.readFileSync(outputFile, 'utf8');
              
              // 3. 透過尋找混淆程式碼的起始特徵來安全地分離 header。
              // 混淆後的程式碼通常以 (function(... 或 const _0x... 開頭。
              const obfuscatedCodeStartIndex = existingContent.search(/\(function\(|const _0x/);

              if (obfuscatedCodeStartIndex > 0) {
                  // 如果找到了混淆程式碼的開頭，那麼它之前的所有內容都被視為 header。
                  header = existingContent.substring(0, obfuscatedCodeStartIndex).trim();
                  console.log('✅ 成功從現有檔案中保留了 header。');
              } else {
                  console.warn('⚠️ 無法在現有檔案中可靠地找到 header，將使用預設 header。');
              }
          } else {
              console.log(`${outputFile} 不存在，將為首次運行生成預設 header。`);
          }
          // --- 核心邏輯修正結束 ---
          
          if (!fs.existsSync(sourceFile)) {
            console.error(`❌ 錯誤: 來源檔案 ${sourceFile} 不存在!`);
            process.exit(1);
          }

          const originalCode = fs.readFileSync(sourceFile, 'utf8');

          const obfuscationOptions = {
            compact: true,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            deadCodeInjection: true,
            deadCodeInjectionThreshold: 1,
            stringArray: true,
            stringArrayEncoding: ['base64'],
            stringArrayThreshold: 1,
            renameGlobals: true,
            identifierNamesGenerator: 'hexadecimal',
            numbersToExpressions: true,
            splitStrings: true,
            splitStringsChunkLength: 25,
            transformObjectKeys: true,
            selfDefending: false,
            debugProtection: false
          };

          const obfuscatedCode = JavaScriptObfuscator.obfuscate(originalCode, obfuscationOptions).getObfuscatedCode();

          // 將保留的 (或預設的) header 與新混淆的程式碼拼接起來
          const finalCode = header + '\n' + obfuscatedCode;

          fs.writeFileSync(outputFile, finalCode, 'utf8');
          console.log(`✅ 成功生成 ${outputFile}。`);
          NODE

      # 步驟 4: 提交並推送變更 (優化後的方法)
      # 這裡使用了一個專門的 Action，比手動執行 git 指令更簡潔、更可靠。
      - name: Commit and push dist/opp.js
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "build: 自動生成混淆後的 dist/opp.js"
          file_pattern: dist/opp.js # 只提交這個檔案的變更
          commit_user_name: GitHub Actions Bot
          commit_user_email: github-actions[bot]@users.noreply.github.com
          
      - name: 預覽生成的 dist/opp.js
        run: |
          echo "===== Preview of dist/opp.js (first 10 lines) ====="
          head -n 10 dist/opp.js || true
          echo "================================================="
