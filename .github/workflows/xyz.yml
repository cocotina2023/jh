name: Obfuscate op.js xyz

on:
  workflow_dispatch:

jobs:
  build-and-obfuscate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install JavaScript Obfuscator
        run: npm install javascript-obfuscator

      - name: Generate & obfuscate (header taken from op.js)
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          mkdir -p dist
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const JavaScriptObfuscator = require('javascript-obfuscator');

          const srcPath = path.resolve('op.js');
          const outPath = path.resolve('dist/opp.js');

          if (!fs.existsSync(srcPath)) {
            console.error('Error: op.js not found in repo root. Place op.js at repo root.');
            process.exit(1);
          }

          const src = fs.readFileSync(srcPath, 'utf8');

          // 1) 提取 userID（支持 "value" 或 'value' 或 unquotedValue）
          // 正则捕获分组： 1 = double-quoted, 2 = single-quoted, 3 = unquoted
          const userRe = /let\s+userID\s*=\s*(?:"([^"]*)"|'([^']*)'|([^;]+?))\s*;/i;
          const proxyRe = /const\s+proxyIPs\s*=\s*\[([^\]]*)\]\s*;?/i;

          const userMatch = src.match(userRe);
          const proxyMatch = src.match(proxyRe);

          // 默认 UUID（如果源码没有）
          const defaultUUID = 'a1b2c3d4-e5f6-7890-1234-567890abcdef';

          let userVal = defaultUUID;
          if (userMatch) {
            userVal = userMatch[1] ?? userMatch[2] ?? (userMatch[3] && userMatch[3].trim()) ?? defaultUUID;
            userVal = userVal.replace(/[;,\s]*$/,'');
          }

          // 解析 proxyIPs 内容为字符串数组（若无则为 [""]）
          let proxyInner = '';
          if (proxyMatch) proxyInner = proxyMatch[1].trim();
          let proxyArray = [''];
          if (proxyInner.length > 0) {
            const parts = proxyInner.split(',').map(s => s.trim()).filter(Boolean);
            if (parts.length > 0) {
              proxyArray = parts.map(p => {
                const m = p.match(/^['"](.*)['"]$/);
                return m ? m[1] : p;
              });
            }
          }

          // 构建规范 header（保证双引号并 escape 内部双引号）
          const headerText = `let userID = "${String(userVal).replace(/"/g,'\\"')}";\nconst proxyIPs = [${proxyArray.map(x => `"${String(x).replace(/"/g,'\\"')}"`).join(', ')}];`;

          // 从 body 中删除第一次出现的 header（避免重复）
          let body = src;
          if (userMatch) body = body.replace(userMatch[0], '');
          if (proxyMatch) body = body.replace(proxyMatch[0], '');

          // 混淆 body（header 保留明文）
          const options = {
            compact: true,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 0.75,
            deadCodeInjection: true,
            deadCodeInjectionThreshold: 0.4,
            stringArray: true,
            stringArrayEncoding: ['base64'],
            stringArrayThreshold: 0.75,
            renameGlobals: false, // 关键：不要重命名全局符号 userID
            identifierNamesGenerator: 'mangled',
            numbersToExpressions: true,
            splitStrings: true,
            splitStringsChunkLength: 10,
            transformObjectKeys: true,
            selfDefending: false,
            debugProtection: false,
            disableConsoleOutput: true
          };

          const obf = JavaScriptObfuscator.obfuscate(body, options).getObfuscatedCode();

          // 组合输出：header (明文) + 分号行 + 混淆体
          let final = headerText + '\n;\n' + obf + '\n';

          // 清理注释占位（可选）
          final = final.replace(/^\/\/ *<!--.*-->.*$/gm, '');
          final = final.replace(/^\s*<!--.*-->.*$/gm, '');

          fs.writeFileSync(outPath, final, 'utf8');
          console.log('✅ dist/opp.js generated at', outPath);
          console.log('Header used:', headerText.split(/\r?\n/).slice(0,2).join(' | '));
          NODE

      - name: Commit and push dist/opp.js
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add dist/opp.js
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "build: generate obfuscated dist/opp.js (header from op.js)"
            git push
          fi

      - name: Show dist/opp.js preview
        run: |
          echo "===== dist/opp.js (first 20 lines) ====="
          head -n 20 dist/opp.js || true
          echo "========================================"
