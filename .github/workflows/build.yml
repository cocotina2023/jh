name: Obfuscate and Deploy opp.js

on:
  workflow_dispatch:  # 允许手动触发部署

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许 workflow push 回仓库

    steps:
      # 1. Checkout 仓库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3. 安装依赖项，包括 uuid 和 javascript-obfuscator
      - name: Install dependencies
        run: |
          npm install uuid javascript-obfuscator

      # 4. 生成动态 UUID 和 obfuscate opp.js
      - name: Generate dynamic UUID and obfuscate opp.js
        run: |
          set -euo pipefail

          # 使用 uuid 库生成一个随机的 UUID
          USER_ID=$(node -e "const { v4: uuidv4 } = require('uuid'); console.log(uuidv4());")
          PROXY_IPS_JSON='[""]'  # 默认值 [""]

          # 如果通过环境变量或输入修改 PROXY_IPS
          if [ -n "${INPUT_PROXY_IPS}" ]; then
            PROXY_IPS_JSON="${INPUT_PROXY_IPS}"
          fi

          # 创建临时目录
          mkdir -p .github/actions-temp
          TMP_OBF=.github/actions-temp/op.obf.js
          OUT=opp.js

          if [ ! -f op.js ]; then
            echo "Error: op.js not found in repo root"
            exit 1
          fi

          # 混淆 op.js 文件
          javascript-obfuscator op.js --output "$TMP_OBF" --compact true \
            --control-flow-flattening true \
            --control-flow-flattening-threshold 0.75 \
            --dead-code-injection true \
            --dead-code-injection-threshold 0.4 \
            --string-array true \
            --string-array-encoding base64 \
            --string-array-threshold 0.75 \
            --rename-globals true \
            --identifier-names-generator mangled \
            --numbers-to-expressions true \
            --split-strings true \
            --split-strings-chunk-length 10 \
            --transform-object-keys true \
            --self-defending false \
            --debug-protection false \
            --disable-console-output true

          # 清除可能的无关注释和头部内容
          sed -i '/^\/\/ *<!--.*-->.*$/d' "$TMP_OBF"
          sed -i '/^\s*<!--.*-->.*$/d' "$TMP_OBF"
          sed -i '/^\s*let\s\+userID\s*=/d' "$TMP_OBF"
          sed -i '/^\s*const\s\+proxyIPs\s*=/d' "$TMP_OBF"

          # 在生成的 opp.js 中插入动态的 USER_ID 和 PROXY_IPS_JSON
          cat > "$OUT" <<EOF
          let userID = "${USER_ID}";
          const proxyIPs = ${PROXY_IPS_JSON};

          EOF

          # 追加混淆后的代码
          cat "$TMP_OBF" >> "$OUT"

          # 清理临时文件
          rm -rf .github/actions-temp

          echo "✅ Generated opp.js at repo root"

      # 5. 确保 op.js 不被提交并提交 opp.js
      - name: Commit and push opp.js
        run: |
          set -euo pipefail

          # 确保 op.js 不会被提交
          touch .gitignore
          if ! grep -Fxq 'op.js' .gitignore; then
            echo 'op.js' >> .gitignore
            echo 'Added op.js to .gitignore'
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .gitignore opp.js

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m 'build: generate obfuscated opp.js'
            git push
          fi

      # 6. 预览生成的 opp.js 头部内容（前 10 行）
      - name: Preview opp.js header (first 10 lines)
        run: |
          echo "----- opp.js (first 10 lines) -----"
          head -n 10 opp.js || true
          echo "-----------------------------------"
